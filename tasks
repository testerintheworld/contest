<?php 
$task = array(
    array(
        "title" => "Использование цифр.",
        "text" => "Вывести количество цифр в числах от a до b.",
        "inpDate" => "В одной строчке вводятся числа a и b (0 ≤ a,b ≤ 100 000).",
        "outpDate" => "В первой строчке n - количество используемых цифр. Затем n строчек, в каждой из которых цифра и количество раз, сколько используется эта цифра.",
        array(
            array("1 3", "1:1<br>2:1<br>3:1")
            ),
        "timeWork" => "1с",
        "max" => "256 Мбайт",
        "maxBall" => "10",
        "type" => "Олимпиадное программирование",
        "level" => "A",
    ),
    array(
        "title" => "День рождения.",
        "text" => "Дима живет в a квартире. Петя хочет поздравить его с днем рождения. В каком подъезде и на каком этаже живет Дима, если известно число этажей и квартир на каждом этаже, кроме 1, где нет ни одной квартиры. Количество подъездов бесконечно много.",
        "inpDate" => "В 1 строчке номер квартиры Димы. <br> В 2 строчке n (число квартир на 1 этаже одного подъезда) и m (число этажей в каждом пожъезде).",
        "outpDate" => "В первой строчке n - количество используемых цифр. Затем n строчек, в каждой из которых цифра и количество раз, сколько используется эта цифра.",
        array(
            array("5<br>2 2", "2 2")
            ),
        "timeWork" => "1с",
        "max" => "256 Мбайт",
        "maxBall" => "10",
        "type" => "Олимпиадное программирование",
        "level" => "B",
    ),
    array(
        "title" => "Частота слов.",
        "text" => "Какое слово встречается чаще всех. Если их много, вывести их в алфавитном порядке. <br> Слова на английском и русском языках.",
        "inpDate" => "В единственной строке находится предложение.",
        "outpDate" => "В 1 строке вывести n (количество выводимых на экран слов) наиболее частых слов. <br> Затем n трок, в каждом из которых по слову в нижнем регистре.",
        array(
            array("I want to go to school. I go to school every day. London is the capital of Great Britain", "1<br>to"),
            array("Надо учить русский язык. Русский язык - самый богатый язык в мире. Его надо учить.", "2<br>надо<br>русский"),
            ),
        "timeWork" => "1с",
        "max" => "256 Мбайт",
        "maxBall" => "10",
        "type" => "Олимпиадное программирование",
        "level" => "B",
    ),
    array(
        "title" => "Соревнование картингистов.",
        "text" => "После очередного этапа чемпионата мира по кольцевым автогонкам на автомобилях с открытыми колесами Формула-А гонщики собрались вместе в кафе, чтобы обсудить полученные результаты. Они вспомнили, что в молодости соревновались не на больших болидах, а на картах - спортивных автомобилях меньших размеров.<br>Друзья решили выяснить победителя в одной из гонок на картах. Победителем гонки является тот гонщик, у которого суммарное время прохождения всех кругов трассы было минимальным.<br>Поскольку окончательные результаты не сохранились, то каждый из n участников той гонки вспомнил и выписал свои результаты прохождения каждого из m кругов трассы. К сожалению, по этой информации гонщикам сложно вычислить победителя той гонки. В связи с этим они попросили сделать это вас.<br><b>Требуется</b> написать программу, которая вычислит победителя гонки на картах, о которой говорили гонщики.",
        "inpDate" => "Первая строка входного файла содержит два целых числа n и m ( 1 ≤ n,m ≤ 100 ). Последующие 2*n строк описывают прохождение трассы каждым из участников. Описание прохождения трассы участником состоит из двух строк. Первая строка содержит имя участника с использованием только латинских букв (строчных и заглавных). Имена всех участников различны, строчные и заглавные буквы в местах различаются.<br>Вторая строка содержит m положительных целых чисел, где каждое число - это время прохождения данным участником каждого из m кругов трассы (каждое из этих чисел не превосходит 1000). Длина каждой строчки не превышает 255 символов.",
        "outpDate" => "Необходимо вывести имя победителя гонки на картах. Если победителей несколько, требуется вывести имя любого из них.",
        array(
            array(" 3<br>Sumaher<br>2 1 1<br>Barikelo<br>2 1 2<br>Olonso<br>1 2 1<br>Vasya<br>1 1 1<br>Fedya<br>1 1 1", "Fedya"),
            ),
        "timeWork" => "1с",
        "max" => "256 Мбайт",
        "maxBall" => "10",
        "type" => "Олимпиадное программирование",
        "level" => "B",
    ),
    array(
        "title" => "Дипломы.",
        "text" => "Когда Петя учился в школе, он часто участвовал в олимпиадах по информатике. математике и физике. Так как он был достаточно спокойным мальчиком и усердно учился, то на многих из этих олимпиад он получал дипломы. К окончанию школы у него накопились n дипломов, причем, как оказалось, все они имели одинаковые размеры: w - в ширину и h -  высоту.<br>Сейчас Петя учится в одном из лучших российских университетов и живет в общежитии со своими одногруппниками. Он решил украсить свою комнату, повесив на одну из стен свои дипломы за школьные олимпиады. Так как к бетонной стене прикрепить дипломы достаточно трудно, то он решил купить специальную доску из пробкового дерева, чтобы прикрепить ее к стене, а к ней - дипломы. Для того, чтобы эта конструкция выглядела более красиво, Петя хочет, чтобы доска была квадратной и занимала как можно меньше места на стене. Каждый диплом должен быть размещен строго в прямоугольнике размером w на h. Прямоугольники, соответствующие различным дипломам, не должны иметь общих внутренних точек.<br><b>Требуется</b> написать программу, которая вычислит минимальный размер стороны доски, которая потребуется Пете для размещения всех своих дипломов.",
        "inpDate" => "В единственной строчке находятся три числа: w, h, n (1 ≤ w, h, n ≤ 10<sup>9</sup>).",
        "outpDate" => "Необходимо вывести ответ на поставленную задачу.",
        array(
            array("2 3 10", "9"),
            ),
        "timeWork" => "1с",
        "max" => "256 Мбайт",
        "maxBall" => "10",
        "type" => "Олимпиадное программирование",
        "level" => "B",
    ),
    array(
        "title" => "Алгебраическое выражение.",
        "text" => "Напишите программу, выводящую на экран алгебраическое выражение вида \"Ax + By\", где x и y - переменные, а A и B - коэффициенты (целые числа).",
        "inpDate" => "Коэффициенты A и И ввожятся с клавиатуры по одному в строке. Значения A и B находятся в диапазоне (-100 < A,B < 100).",
        "outpDate" => "Программа должна вывести полученное выражение, используя считанные значения A и B.<br><ul><li>знаки арифметических операций отделяются от чисел или переменных пробелами;</li><li>между коэффициентом и переменной пробел не ставится;</li><li>если коэффициент равен 0, то слагаемое не выводится, кроме случая, когда оба слагаемых равны 0 (в этом случае выводится 0);</li><li>если коэффициент B отрицательный, то вместо операции сложения должна использоваться операция вычитания, то есть вместо \"3x + -2y\" должно быть выведено \"3x - 2y\";</li><li>коэффициент, равный 1, не выводится;</li><li>коэффициент, равн\ый -1 не выводится, при этом учитывается наличие знака \"минус\";</li><li>при вводе данных, не удовлетворяющих условию задачи, программа должна корректно завершать работу и выдавать сообщение \"ERROR\".</li></ul>",
        array(
            array("4<br>5", "4x + 5y"),
            array("1<br>-5", "x - 5y"),
            array("-5<br>0", "-5x"),
            array("0<br>-1", "-y"),
            array("0<br>0", "0"),
            array("-3<br>-2", "-3x - 2y"),
            array("201<br>5", "ERROR"),
            array("5<br>4a", "ERROR"),
            ),
        "timeWork" => "1с",
        "max" => "16 Мбайт",
        "maxBall" => "10",
        "type" => "Индустриальное программирование",
        "level" => "B",
    ),
    array(
        "title" => "Формула.",
        "text" => "Рассматривается математическое выражение, которое необходимо проанализировать. В записи формулы используются квадратные, круглые и фигурные скобки, правильность расстановки которых необходимо определить. Правильность переменных, математических операций и их приоритетность не учитывать. Данная формула является верной.",
        "inpDate" => "Единственной строчкой вводится последовательность из скобок (открывающихся и закрывающихся скобок трех видов), а также переменные и математические операции. Длина последовательности не превышает 200 символов. Последовательность может содержать пробелы.",
        "outpDate" => "Проверьте, является ли эта последовательность правильной. Вывести 1, если последовательнось правильная и значение 0 в противном случае.",
        array(
            array("{[c*a-b}]*(a+b)-{c/2 + b/3}", "0"),
            array("{a+b}*[2*{d-c}+b] - (a+1)/(b+2)^[k+1]", "1"),
            array("(a+b{c^2([a-d]+[a-b]+[d-c]*(a*b)(d+a(a/2 + a/b)){b+a{b+d}})})", "1"),
            array("{a*b*c - d}*{3*a - 8} + (b-c)/(a^3 - 9)*{d^2+a^3+b/2}[d*c-a]+1]", "0"),
            ),
        "timeWork" => "2с",
        "max" => "32 Мбайта",
        "maxBall" => "10",
        "type" => "Индустриальное программирование",
        "level" => "A",
    ),
    array(
        "title" => "Квадратные уравнения.",
        "text" => "Найти общее количество решений уравнения для всех возможных комбинаций (a, b, c) при которых вершина параболы <i>f(x)=a*x<sup>2</sup> + b*x + c</i> касается оси абсцисс. Параметры a, b, с целые и измеряются в диапазонах от 1 до q, от 1 до p, от 1 до s, а значения a, b, скратны трем, двум, четырем соответственно.",
        "inpDate" => "В единственной строчке задается q, p, s. (1 ≤ q, p, s ≤ 100)",
        "outpDate" => "Выводится общее количество решений N.",
        array(
            array("10<br>20<br>30", "2"),
            ),
        "timeWork" => "2с",
        "max" => "16 Мбайт",
        "maxBall" => "10",
        "type" => "Олимпиадное программирование",
        "level" => "A",
    ),
    array(
        "title" => "Мячик.",
        "text" => "Юный научный исследователь решил смоделировать эксперимент. Для этого он взял горку, которая содержит N ступенек. Мячик бросается с некоторой высоты на постамент, при этом в момент бросания ему придается вращательный момент. Вращательный момент направлен таким образом, чтобы мячик соскакивал с горки по ступенькам. Предполагается, что мячик может за одно касание (отскок) попасть на следующую, через одну или через две ступеньки. При этом в процессе  падения, такие касания (отскоки) могут чередоваться случайным образом. Найти сколько существует способов, которыми мячик может оказаться на земле при заданном значении N.",
        "inpDate" => "В единственной строке 1 число - N (1 ≤ n ≤ 35).",
        "outpDate" => "Общее количество способов, которыми мячик может оказаться на земле M.",
        array(
            array("3", "7"),
            array("10", "504"),
            ),
        "timeWork" => "2с",
        "max" => "32 Мбайта",
        "maxBall" => "10",
        "type" => "Олимпиадное программирование",
        "level" => "B",
    ),
    array(
        "title" => "Обыкновенная дробь.",
        "text" => "Напишите программу, которая преобразует дробь, заданную в формате числитель/знаменатель, к правильному виду, то есть сокращает ее и выделяет целую часть.",
        "inpDate" => "Числитель и знаменатель дроби вводятся с клавиатуры по одному в строке. Значения числителя и знаменателя являются целыми неотрицательными числами, не привышающими 1 000 000.",
        "outpDate" => "Программа должна вывести правильную обыкновенную дробь, полученную после преобразования в формате<br><целая часть><пробел><числитель>/<знаменатель><br>Целая или дробная часть, равная 0, не выводится, за исключением случая, когда весь результат превращается в 0. Если знаменатель равен 0, должно выдаваться сообщение об ошибке \"ERROR\".<br>При вводе данных, не удовлетворяющих условию задачи, программа должна корректно завершить работу и выдавать сообщение \"ERROR\".",
        array(
            array("4<br>5", "4/5"),
            array("20<br>6", "3 1/3"),
            array("9<br>3", "3"),
            array("3<br>0", "ERROR"),
            array("1000001<br>4", "ERROR"),
            array("4<br>a1", "ERROR"),
            ),
        "timeWork" => "1с",
        "max" => "8 Мбайт",
        "maxBall" => "10",
        "type" => "Индустриальное программирование",
        "level" => "A",
    ),
    array(
        "title" => "Много фактариалов.",
        "text" => "Факториалом числа m называется произведение натуральных чисел от 1 до m.<br>m! = 1 * 2 * 3 * ... * m; <br> 4! = 1 * 2 * 3 * 4 = 24.<br>Требуется написать программу, которая подсчитывает количество факториалов между N и K (включительно).",
        "inpDate" => "На вход подается два натуральных числа N и K, записанные через пробел. (1 < N ≤ K ≤ s*10<sup>18</sup>).",
        "outpDate" => "Выведите одно число - количество факториалов между N и K, включая границы.",
        array(
            array("2<br>700", "4"),
            ),
        "timeWork" => "1с",
        "max" => "32 Мбайт",
        "maxBall" => "10",
        "type" => "Индустриальное программирование",
        "level" => "B",
    ),
    array(
        "title" => "Больше-меньше.",
        "text" => "Инвертирование к некоторому натуральному числу X - это число, в котором все цифры исходного числа X записаны в обратном порядке, если у результата есть лидирующие нули, они отбрасываются. Обозначим такое число X<i><sub>i</sub></i>.<br>Требуется написать программу, которая сравнивает X и X<i><sub>i</sub></i>.",
        "inpDate" => "На вход подается одно натуральное число X. (0 < X ≤ 10<sup>100</sup>).",
        "outpDate" => "Выведите результат сравнения X и X<i><sub>i</sub></i>, точнее - знак, который будет соответствовать результату сравнения.",
        array(
            array("143", "<"),
            array("252", "="),
            ),
        "timeWork" => "1с",
        "max" => "16 Мбайт",
        "maxBall" => "10",
        "type" => "Индустриальное программирование",
        "level" => "A",
    ),
    array(
        "title" => "Матрица.",
        "text" => "Задана квадратная матрица A размером NxN, заполненная целыми числами от 0 до 9. Требуется получить матрицу B такого же размера по следующим правилам: <ul><li>главная диагональ матрицы A переписывается в матрицу B без изменения;</li><li>каждый элемент матрицы B(i,j) является максимальным элементом прямоугольного треугольника, ограниченного элементами A(i,j), A(i,i) и A(j,j).</li></ul>",
        "inpDate" => "В первой строке входящих данных записано число N. (1 < N ≤ 100)<br>В следующих N строках содержатся строки матрицы A, все числа лежат в пределах от 0 до 9 и разделены пробелами.",
        "outpDate" => "Необходимо вывести N строк матрицы B. исла в каждой строке должны быть разделены одним пробелом.",
        array(
            array("2<br>1 2<br>3 4", "1 4<br>4 4"),
            array("4<br>0 0 0 0<br>0 0 3 0<br>0 0 0 0<br>0 7 0 0", "0 0 3 3<br>0 0 3 3<br>0 0 0 0<br>7 7 0 0"),
            array("5<br>1 2 3 4 5<br>1 2 3 4 5<br>1 2 3 4 5<br>1 2 3 4 5<br>1 2 3 4 5", "1 2 3 4 5<br>2 2 3 4 5<br>3 3 3 4 5<br>4 4 4 4 5<br>5 5 5 5 5"),
            ),
        "timeWork" => "1с",
        "max" => "32 Мбайта",
        "maxBall" => "15",
        "type" => "Олимпиадное программирование",
        "level" => "B",
    ),
    array(
        "title" => "Космический контейнер.",
        "text" => "На космическую станцию собираются отправить очередной контейнер с запасом еды на длительний срок. При этом контейнер имеет ограничение по весу - K. Предполагается, что оптимально набранный вес будет равен или меньше вместимости контейнера.<br>Каждый тип еды имеет определенную калорийность. Задача отправить на орбиту контейнер, таким образом, чтобы запас калорийности всей еды в нем был максимальным.",
        "inpDate" => "Все переменные целого типа. В первой строке K и N (1 ≤ K ≤ 10000, 1 ≤ N ≤ 5000). В последующих строках вес продукта и его калорийность.",
        "outpDate" => "В первой строке суммарный вес наилучшего набора, во второй строке суммарная калорийность получившегося набора.",
        array(
            array("500 5<br>100 125<br>200 150<br>300 199<br>400 400<br>500 375", "500<br>525"),
            array("600 7<br>100 300<br>200 150<br>200 3000<br>300 400<br>600 999<br>50 1500<br>20 800", "570 5750"),
            ),
        "timeWork" => "2с",
        "max" => "128 Мбайт",
        "maxBall" => "10",
        "type" => "Олимпиадное программирование",
        "level" => "C",
    ),
    array(
        "title" => "Числа.",
        "text" => "Дано натуральное число N. Требуется представить его в виде суммы двух натуральных чисел A и B таких, что наибольший общий делитель чисел A и B максимален.",
        "inpDate" => "В единственной строке задается натуральное число N (2 ≤ N ≤ 10000).",
        "outpDate" => "Выводятся два числа A и B. Если решений несколько, выбрать любое из них.",
        array(
            array("21", "7 14"),
            array("33", "11 22"),
            ),
        "timeWork" => "2с",
        "max" => "32 Мбайта",
        "maxBall" => "10",
        "type" => "Олимпиадное программирование",
        "level" => "B",
    ),
    array(
        "title" => "Пересечение окружностей.",
        "text" => "На плоскости даны 2 окружности. Требуется проверить, пересекаются ли они.",
        "inpDate" => "Входные данные состоят из двух строк. На каждой строке записана информация об одной окружности - координаты ее центра x и y (целые числа, по модулю не превосходящие 5000) и радиус (целое число 1 ≤ r ≤ 1000).",
        "outpDate" => "Выведите \"YES\", если окружности пересекаются, и \"NO\" в противном случае.",
        array(
            array("0 0 2<br>0 3 2", "YES"),
            array("1 1 1<br>4 4 1", "NO"),
            ),
        "timeWork" => "1с",
        "max" => "16 Мбайт",
        "maxBall" => "10",
        "type" => "Олимпиадное программирование",
        "level" => "A",
    ),
    array(
        "title" => "Нули.",
        "text" => "Требуется найти самую длинную непрерывную цепочку нулей в последовательности нулей и единиц.",
        "inpDate" => "В единственной строке записана последовательность нулей и единиц (без пробелов). Суммарное количество цифр не превышает 1 000 000.",
        "outpDate" => "Выыести искомую длину цепочки нулей.",
        array(
            array("00101110000110", "4"),
            ),
        "timeWork" => "1с",
        "max" => "16 Мбайт",
        "maxBall" => "10",
        "type" => "Индустриальное программирование",
        "level" => "A", 
    ),
    array(
        "title" => "Автоматизированное управление доставкой.",
        "text" => "Группа программистов регионального сортировочного центра работает над автоматизацией управления доставкой почты.<br>осылки приимаются в клиентских почтовых пунктах. Почтовый пункт принимает посылки, масса каждой из которых состовляет целое число килограммов. Минимальная масса посылки равна 1 кг, а максимальный вес - k кг. Принятые посылки помещаются в специальный пакет.<br>Если после приема очередной посылки суммарная масса посылок в пакете больше или равен x кг, то пакет доставляется в муниципальный почтовый центр, где пакет с посылками перемещается в специальный контейнер.<br>Если после доставки очередного пакета суммарная масса посылок в контейнере больше или равен y кг, то контейнер перевозится в региональный сортировочный центр, откуда посылки уже доставляются получателям.<br>Суммарная масса посылок в контейнере при его перевозке может различаться в зависимости от массы принятых посылок. Необходимо узнать, каким может быть минимальный суммарная масса посылок в контейнере при его перевозке из муниципального почтового центра в региональный сортировочный центр.<br>Требуется написать программу, которая по заданным значениям k - максимальной массы посылки, x - необходимой массы пакета для его отправки в муниципальный почтовый центр, и y - необходимая масса контейнера для его отправки в региональный сортировочный центр, определяет минимальную массу контейнера при его перевозке.",
        "inpDate" => "Входные данные содержат три целых положительных числа, разделенные пробелом. Первое число - k, затем x, следом y. (1 ≤ y ≤ 10<sub>9</sub>).",
        "outpDate" => "Требуется вывести одно целое число - минимальную возможную массу контейнера при перевозке.",
        array(
            array("2 7 20", "21"),
            ),
        "timeWork" => "1с",
        "max" => "32 Мбайта",
        "maxBall" => "10",
        "type" => "Олимпиадное программирование",
        "level" => "B",
    ),
    array(
        "title" => "Большой линейный коллайдер.",
        "text" => "Группа ученых работает в международной научной лаборатории, которая занимается исследованиями поведения элементарных частиц в установке для экспериментов \"Большой линейный коллайдер\" (БЛК). Установка БЛК представляет собой прямую, в некоторых точках которой размещаются частицы, которые могут перемещаться вдоль прямой.<br>В очередном эксперименте в БЛК размещаются n частиц, каждая из которых представляет собой либо отрицательную заряженную частицу - электрон e<sup>-</sup>, либо положительную заряженную частицу - позитрон e<sup>+</sup>. В эксперименте i-ая частица исходно размещается в точке с координатой x<sub>i</sub>. После начала эксперимента в результате работы БЛК частицы  начнут перемещаться в разные стороны вдоль прямой: е<sup>-</sup> частицы перемещаются по направлению уменьшения координаты, а e<sup>+</sup> частицы - по направлению увеличения координаты. Абсолютные величины скоростей всех частиц одинаковы и равны 1.<br>Если в процессе перемещения частицы e<sup>-</sup> и e<sup>+</sup> оказываются в одной точке, то они взаимоднействуют и обе исчезают, при этом они не влияют на дальнейшее поведение остальных частиц.<br>Ученые выбрали m различных моментов времени t<sub>1</sub>, t<sub>2</sub>, ..., t<sub>m</sub>, для каждого из которых их интересует, какое количество частиц находится в БЛК непосредственно после каждого из этих моментов времени. Отсчет времени начинается с 0, когда частицы приходят в движение. Частицы, исчезнувшие в результате взаимодействия в момент времени t<sub>j</sub>, не должны учитываться при подсчете количества частиц для этого момента времени.<br>Требуется написать программу, которая по описанию исходного расположения и типов частиц, а также заданным моментам времени, определяет для каждого из моментов количество частиц, которое будет находиться в БЛК непосредственно после этого момента.",
        "inpDate" => "Первая строка содержит число n - количество частиц (1  n ≤ 200 000). Последующие n строк описывают частицы следующим образом: каждая строка содержит по два целых числа x<sub>i</sub> и <i>v</i><sub>i</sub> - координату i-й частицы и ее тип соответственно (-10<sup>9</sup> ≤ x<sub>i</sub> ≤ 10<sup>9</sup>, <i>v</i><sub>i</sub> раво -1 или 1). Частица ",
        "outpDate" => "",
        array(
            array("", ""),
            ),
        "timeWork" => "",
        "max" => "",
        "maxBall" => "",
        "type" => "",
        "level" => "",
    ),
    /*

    array(
        "title" => "",
        "text" => "",
        "inpDate" => "",
        "outpDate" => "",
        array(
            array("", ""),
            ),
        "timeWork" => "",
        "max" => "",
        "maxBall" => "",
        "type" => "",
        "level" => "",
    ),

    */
);?>